{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","MOCK.js","main.js"],"names":["MOCK","_id","index","guid","name","tags","type","friends","id","suffix","Z","RULES","REQUIRED","label","html","validate","rule","parent","parentElement","value","message","dataset","invalid","trim","Error","select","change","target","map","tag","input","blur","toLowerCase","password","data","number","tel","checkbox","units","Array","isArray","friend","length","form","onSubmit","formData","console","log","inputs","submit","preventDefault","FormData","document","getElementById"],"mappings":";;AYAA;;AACA;;ADDO,IAAMA,IAAI,GAAG,CAClB;AJkBF,APnBA,ACAA,ACAA,AIkBA,AGAA,ALAA,ACAA,AFlBA,AQEIC,EAAAA,GAAG,EAAE,0BADP;AHkBF,AGhBIC,EAAAA,KAAK,EAAE,CAFT;AJDF,ADmBA,AGAA,ALGA,ACFA,AMhBIC,EAAAA,IAAI,EAAE,sCAHR;AHDF,AGKIC,EAAAA,IAAI,EAAE,gBAJR;ALmBF,AGCA,ALrBA,ACAA,AMMIC,EAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,MAAnB,EAA2B,SAA3B,CALR;AAMEC,EAAAA,IAAI,EAAE;ALeV,AGtBA,AECE,CADkB,EASlB;AACEL,EAAAA,GAAG,EAAE,0BADP;ALcF,AKZIC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,IAAI,EAAE,sCAHR;ALeF,AKXIC,EAAAA,IAAI,EAAE,cAJR;AAKEE,EAAAA,IAAI,EAAE;ALdV,AKSE,CATkB,EAgBlB;AXIF,AWHIL,EAAAA,GAAG,CXGD,CWHG,SXGO,GAAG,IAAI,OAAJ,EAAnB,CWJE;AXWF,ACLA,ACeA,ACjBA,AQFIC,EAAAA,KAAK,EAAE,CAFT;AAGEC,EAAAA,IAAI,EAAE,sCAHR;AJOF,AIHIC,EAAAA,IAAI,EAAE,mBAJR;AVSK,AOkBP,AGtBIE,EAAAA,IVIS,AUJL,EAAE,UVIe,GAAG,MAAM,CAAC,cAAP,KAA0B,SAA1B,IACvB,MAAM,CAAC,cAAP,CAA4C,yBAA5C,KACG,SAFD;AAIP,ACYO,AE3BP,ACAA,AFUO,AQRL,CAhBkB,EAuBlB,GTkBW,ACjBA,MAAM,EDiBE,CCjBC,EDiBU,EAAzB,KCjBwB,MAAM,CAAC,IAAI,CAAC,MAAL,EAAD,CAAN,CAAsB,KAAtB,CAA4B,CAA5B,CAA8B,IAAtD;AIED,ALiBN,ACjBA,AQFIL,EAAAA,GAAG,CJEM,CIFJ,uBJEH,CAA+B,EIHnC;AJIA,AEbF,AEWIC,EAAAA,KAAK,EAAE,CAFT;AHwBI,AGrBFC,EAAAA,IAAI,EAAE,CHqBM,eAAV,CAA0B,MAA1B,EAAgD,aGxBpD;AHyBA,AJxBF,ACFA,AMKIC,EAAAA,IHqBE,AGrBE,EAAE,WHqBS,GAAG,GGzBpB,WHyBkC,CAAC,GAAf,CAAmB,MAAM,CAAC,IAA1B,CAApB;ACxBK,AEIHE,EAAAA,IFJS,AEIL,EAAE,GFJQ,GAAG,IAAI,OAAJ,EAAd;APsBA,AOpBP,ADuBE,AG1BA,CAvBkB,EA8BlB,GTgBW,AMGP,ONHc,GAAG,EAAhB,CMGY,KAAK,SAAtB,EAAiC;AAC/B,ALpBG,AQCHL,EAAAA,EHmBA,CGnBG,CRDM,CQCJ,SRDc,CKoBN,ELpBS,CKoBN,MLpBa,MAAM,CQArC,IRAK;AGhBP,AEqCM,AJvBA,ACFA,AMMFC,EAAAA,IHmBE,AJvBO,ACFA,CMMJ,EAAE,CAFT,QHqBgB,EAAE,AHzBd,CAAqB,CDErB,CAAuB,CIuBL,OAAJ,EADA;APfb,AOiBD,AJlBJ,ACFA,AFAK,AQCHC,EPCF,ACFA,AMCEA,IVES,AOiBP,ALpBO,AQCL,EAAE,KPCR,ACFA,CDGI,ACFA,CGmBS,EAAE,ALpBO,EFGE,CEHC,CKoBN,AHpBnB,CJIE,AGFF,CHEG,AIHgC,CGmBpB,AJjBS,ADHK,KEA7B,CFAyB,CEC6B,AFDlB,CFIlC,CGFF,CHGG,AELoC,CCInC,ACJJ,EAEI,EJEF,CEJ2C,CFM1C,CGJH,EHIG,AGFuB,ADJuB,EEAjD,AMFA,CVQoB,CIJY,GJE9B,EAGC,CEPwD,EAAlC,CAApB,EFOF,GAAoB,IAHrB,KAGmC;AACjC,AOUc,AJrBlB,ACME,AFDJ,AQAIC,EAAAA,GHgBA,CPVM,AUNF,EAAE,CPLR,ACMO,CJKK,GAAG,EGXf,CCME,EJKE,AGX4B,CCMf,CDNjB,MCME,CMLF;AJMA,ADRK,AE0BH,AJjBA,ACDA,AMDAG,EJCF,AIDEA,EHmBA,EF1BS,GFSJ,ACDA,AMDE,EAAE,CACP,GNAF,ECRoB,AFSpB,CIiBc,AHlBA,CGkBC,CF1BS,AFSR,EIiBhB,CAAmB,CHlBnB,CCRuB,GCQC,AHCxB,CGAE,ADT4D,AE0BrC,CAAC,IAA1B,EDlBwB,ACkBQ,EDjBZ,IADI,EACU,KCiBlC,EDlBwB,EAEtB,OAFsB,EAEA;AACxB,ANEE,AKZJ,AE0BC,AJjBC,ACDA,AMAIC,IAAAA,EAAE,EAAE,CVIC,AKXP,AFQG,ACDA,AMDH,CJGI,GNEO,AIJb,CCPO,ECSK,AFFA,EJIM,AGHlB,CGCe,ADTH,CDOZ,CJIE,AGHe,EGCE,ANEI,AKXrB,CCSkB,CAAD,CAAnB,CDRE,EAAE,CFOJ,MEPW,KAAP,KAAiB,QAAjB,IAA6B,OAAO,KAAP,KAAiB,UAAhD,CAFJ;ALaM,AKVP,AFOG,ACDA,AMAIJ,CLVD,GKUCA,IAAI,CPCH,ACDA,CJIK,AUJA,CVIC,GAAG,EGHd,EHGmB,AIJnB,CJIoB,AGHL,ECDE,KDCjB,IHGI,AIJJ;AEEA,ANGI,AKTR,AEuBE,AJjBC,ACDA,AMHG,GADO,CVQL,CUHF,CHiBA,EDjBE,KNGS,CMHH,ANGI,AOcJ,GAAG,EDjBE,GAAf,EAAoB,ENGhB,CAAuB,GOcD,CPdtB,AOcuB,EPdO,MAA9B,IOcS,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,CAAf;ADhBI,ANGE,AIHN,AFJK,AQICI,IVGA,AUHAA,ERJK,AQIH,EVGE,AUHA,CADN,EVIS,CMHH,ANGJ,QMHY,GAAG,GJJU,CIIN,EJJS,OAA7B,eIIgB,CAAsB,OAAtB,EAA+B,IAAI,CAAC,KAAL,CAAW,CAAX,CAA/B,EAA8C,OAA9C,CAAjB;AACA,APKN,ACFO,AOaL,AJhBA,ADHF,AQGQJ,EPAN,EOAMA,EHgBF,EJhBE,AOAI,CPAH,COAK,GJAD,CCgBC,CJhBN,EAAkB,EIgBP,EDhBE,CAAC,KAAhB,CCgBJ,EAA4B;ADfzB,ANGA,AOaD,AJhBA,AOHE,CVLC,EUAM,CALX,IPaM,CAAC,EIgBE,CJhBC,CAAR,MIgBA;ARXG,ACAP,AOYG,AGfCE,EAAAA,CHEkD,CAepD,ERdW,AWHL,EAAE,OXGY,GAAgC,CAA7B,IACpB,CAAC,GAAG,IAAJ,KAAuB;AOLxB,APME,AQaJ,AJnBE,AOdF,CA9BkB,EA+ClB,KJHM,APMI,CAAC,AINJ,GJMO,CAAC,CONH,APMI,CINH,EJMM,EONF,AHAf,EJMa,CONb,APME,CINiB,CGAC,IHAI,MAAxB,EAAgC;AGC9B,APMA,AINA,ACDJ,AMIEL,EXGE,AKPJ,AMIEA,GAAG,EAAE,ENJA,CDCC,EJMM,AKPP,CECI,APMI,CONH,AHAA,EJMR,CAAe,CONH,APMZ,CINa,CJMK,IAAlB,IINA,EAAwB,GOE5B,CJFY,CAAc,OAAd,EAAuB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAvB,EAAsC,OAAO,CAAC,YAA9C,CAAD,CAAP;AACD,APMC,AINE,ACDJ,AMIAC,EAAAA,KAAK,CPHD,CJMK,AWHF,CXGL,AKPI,AMER,EPDU,CAAC,KCDK,GDCV,ACDa,CDCC,ICDI,EDCE,CAAC,CAAD,CAApB,ECDa,CAAa,MAAb,GAAsB,CAAvC;ALQC,AMfC,AE0BJ,AJjBK,ACDH,AFJE,AQQFC,CXFG,CWEHA,ILZS,AHIA,AQQL,EHcA,AHlBA,AMIE,GHcC,CHlBC,EGkBE,ALtBR,CEIS,AFJM,EEIjB,GGkBgB,CAAC,GF1Bf,CAAyB,GE0BjB,CAAe,IAAf,CAAoB,YGjBhC,IHiBY,CAAZ,CAjBoD,CAmBpD;ADnBE,ADFF,AHCA,AQKEC,ELNF,AHCA,AQKEA,IAAI,EJJA,AIIE,KLNR,AHCA,CICY,ADFA,AHCA,KICK,CJDjB,CGDA,CCEE,AJDkC,CGDN,AKE9B,CJAsB,GDFtB,EAA4C,AHC5C,EAAgE,KGDhE,EAA6D;ACGzD,ADLJ,AGFK,AD0BL,AJnBI,ACDF,AFJF,AQSEK,EHeF,AGfEA,IFXS,ALOP,CAAC,COIG,CLTR,ADIO,AFJP,CKwBQ,AGfE,EFXO,CFON,ACmBA,AHpBA,CECC,ADLZ,ADIY,AFJZ,CMDE,AEKF,CFLG,CHCK,ADIO,AFJS,CIKR,AFDd,CFJF,CEIkB,CCJlB,ADImB,CILjB,EACC,AJImB,EGoBE,CAAC,KHpBvB,CILA,CJK8B,CIH7B,AJG8B,CGoBtB,CAAwB,AHpBjC,EAAmC,CGoB1B,CAA4B,CCzBrC,EDyBS,CDnBC,ACmBZ,CDnBqC,CEJE,MFI3B,EAAkC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAlC,EAAiD,OAAjD,CAAD,CAAP;AACD,ADHD,AGDE,ALID,ACDC,AFDF,AQMAH,EAAAA,IFRM,AEQF,EAAE,CLPD,AHCA,CMFK,EJGF,CIHK,AJGJ,GCFT,ADEY,AFDZ,EMFkB,CHCH,AGDI,ANEJ,EECE,CIHJ,CAAU,GHCvB,AHCA,EECY,CAAa,CAAb,CAAV,CIHW,AJEsB,CIFjC,AJIA;ALMC,ACHA,AKLH,AEqBF,AHlBI,AFFF,AQDF,CA/CkB,CAAb,IXuDM,ACHA,AOgBP,ELpBE,CGDC,IAAL,AHCS,CKoBC,EFrBE,AHCA,CHOQ,ACHA,AEJP,CAAb,CKoBe,CRbS,ACFxB,AKNA,CNQuB,ACFtB,IDEuD,GQa1D,EPfE,AOe0B,EPfR,SAAlB,EAAwC,OAAA,GAAqB,IAA7D,KACW;AMJX,APMF,ACDQ,AKPN,AGFE,ADuBF,AJnBA,ACCE,AFFF,MFMU,AQTJ,ENGF,CHOC,AMRA,AFEA,CGAC,ANKQ,AQTJ,GRSO,EQTF,ALIJ,CJMC,AMRZ,CNQK,AGPQ,CICC,CDFC,AFEf,CDDgB,CICC,AJDjB,CHOkB,ACDZ,CGLa,CKJjB,CFImB,CDFrB,AGF0B,ELIF,IJMnB,EINL,EJMgC,AINA,UJMU,CAAC,GON1B,APMe,CONQ,APMO,CAAf,CAAlC,KONmB,EAAgC,IAAhC,EAAsC,OAAtC,CAAjB;AACA,APMH,AMRG,AGFI,ADuBJ,AJnBE,ACCA,AFFF,CHKG,GQeH,KFrBK,CFEC,ADDA,CICC,CCmBC,EFrBR,AFEU,CImBC,EFrBE,ECEE,ADFf,AEqBe,AJnBA,CGAC,GJDG,EICnB,CEJgB,ANGc,ECC5B,ADDF,ECC0B,KKJtB,EAAuB,ADuBhB,CAAa,MAAb,ECvByB,ADuBJ,CCvBK,KDuBC,CAAC,ICvBnC,cDuB4B,EAArB,CAAX,CAF0B,CAG1B;ADnBD,ANIO,AQRF,ALIA,ACCF,IILE,ILIA,CHIS,AQRJ,CAAC,ELIF,CHIS,AQRb,ALIK,CKJK,IRQQ,CGJlB,IKJA,ERQE,AQRmB,ERQM,EQRF,GAAG,IAAI,eAAJ,CAAY,MAAA,CAAA,MAAA,CAAA;AFK9C,ANIU,AKPR,AGD2B,ADuB3B,AJnBG,ACCD,AFHF,IKqBA,ECvB2B,GHCtB,CLOS,AENR,CFMS,EKPN,CLOS,AKPR,GAAG,AEsBA,CPfU,AKPvB,AEsBc,CPfU,CKPR,CAAC,AGDyB,EAAf,CHCP,EHCE,CKqBtB,CAAwB,CLrBE,CFMlB,CKPmB,AEsB3B,CFtB4B,AEsBA,GAA5B,EAAiC,ALrBR,CGDL,GAAiB,AHCsB,CGD3D,EAAwC,CAAC,AEsBzC,EFtBA,EAA6C;ALQrC,AKPN,AGH0C,ADyB7C,AJnBE,ACCC,AFHA,GKLgD,CPW1C,AOiBV,CC3B8C,EAEd,IHCvB,CHCC,CFMS,CAAC,AQV0B,CAAZ,CHG9B,AGHE,CHGS,CAAX,CHCa,GGDG,AHCA,GFMV,CAAsB,CKPP,GLOf,AENkB,CAAC,OGDT,AHChB,CADyD,CGAzD,AHEA;AFMM,AKPP,AGAG,ALGL,ACCG,AFFA,IFKM,AQPJ,IROQ,AQPJ,CAAC,EROM,CAAP,OQPJ,CAAgB,SAAhB;ARQG,AKPR,AGAI,AJID;AJIG,AKNP,AEqBA,AJnBA,ADFI,CFHC,COwBL,AJnBA,MAAM,GAAA,CDFI,GKqBG,CAAC,ELrBE,GAAG,OKqBnB,CAA2B,ALrBA,CAAC,EKqB5B,CAA+B,MAAM,CAAC,MLrBnB,CKqBnB,ALpBQ,EKoBuC,KLrB5B,EAEX,CKmBR;ACtBI,ADuBJ,AJnBE,ACAE,AFDQ,EMHR,IAAI,CAAC,EDuBF,GHnBG,GIJN,CAAc,CDuBlB,AHnBe,GAAG,EIJd,+BJIqC,IAAvB,CAA4B,CAA5B,CAAd;AEDJ,AEFI,ADuBL,AJnBG,ADJiB,EIEnB,AEFI,IAAI,CAAC,CNGD,IAHW,CMAf,CNII,KAJW,CAAf,CAJyD,CIMzC,AJGhB,CIHiB,OAAD,EAAuB;AACzC,AEFC,ALID,ACDE,AFEA,CMpBC,SJkBG,CEDC,IAAI,AFCT,EAAW,aEDN,CAAa,OAAb,CAAP;AACD,ACoCI,AJlCH,ACDI,AFEF,MKiCO,cAAc,GAAG,IAAI,GAAJ,EAAvB;AFrCK,AFIR,ACDI,ECHI,WAAW,GAAA;AChCc,ADiCjC,AFIA,ACDI,AFCF,UCAI,ADAA,CGJC,IAAI,GFIG,GAAG,EDAE,GAAG,CAApB,CGJK,CAAkB,IAAlB,CAAP,OFKI,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAA8B,SAA9B,CAAwC,IAAxC,CADa,GAEb,QAAQ,CAAC,UAAT,CAAoB,KAAK,QAAL,CAAc,OAAd,CAAsB,OAA1C,EAAmD,IAAnD,CAFJ;AEHD,AFOC,ACJI,QAAA,EDIE,ECJE,GDIG,CCJC,CAAC,CDIC,ACJA,KDIK,CCJP,CAAS,CAAT,EAAY,GDIV,CAAc,CCJC,CAAC,GDI9B,ECJY,IAA2B,KAAK,CAAC,CAAD,CAAhC,GAAsC,KAAK,CAAC,CAAD,CAA3C,GACJ,8BADI,GACmB,KAAK,CAAC,CAAD,CADxB,GAC8B,gBADtC;ADKJ,ACHG,AFDD,OELA,CDSE,KCHK,AFDA,ICII,EDJE,CCIC,ADJA,CCIhB,ODJS,EAAP,EAA0B;AIFzB,ADAK,AFOR,ACHI,AFDA,EGHI,ICAC,EHOL,ADJA,GGHa,EHGR,CGHQ,GFOJ,GAAG,CAAhB,SGPiC,GAAG,IAAI,wBAAJ,EAAjC;ADCH,ADII,AFDA,UGHE,IHGI,GGHG,CHGC,EGHE,CHGC,IGHI,EHGE,CAAC,IGHxB,OHGI;AGFJ,AFMA,ACFI,QAAA,ECJE,AFMA,CENC,CDIC,ECJE,EDIE,CAAC,GAAG,CCJC,CAAC,IFMI,EENZ,CFMgB,EENC,CAA3B,KFMyB,GCFrB,CDEoD;AELxD,AFME,ACFC,AFFC,QGFA,IAAI,AHEA,GGFG,CHEC,CGFZ,AHEa,QAAL,KAAkB;ACKxB,ACFD,AFH2B;AGA5B,AFME,ADNE,SGAC,CHAgD,ECM7C,CENC,CAAC,GAAG,CAAb,AFMc,EENE,CAAC,AFMA,GENG,CAApB,EAAuB,CAAC,CFMC,CENzB,AFM0B,EENE,cFMX,CACX,QADW,EAEX;AEPJ,AFOQ,ACJV,AFHM,MGAJ,IAAI,CDGC,GCHG,CDGC,CFHA,EEGG,EFHa,CGAV,AHAW,CGAV,CAAD,ADGE,CCHjB,MDGY,CAAa,GFHhB,EAAL,EAAuC,CEG/B,CAAd;ACFE,AFIe,ACDlB,AFHS,QCOF,IEPE,AFIS,EAIX,EERM,GAAG,AFIE,CAAf,ADJY,IGAM,KAAL,CAAW,AHAF,CGAT,CAAb,CHA0B,IAAgB,CAAC,UAArC,CADqC,CAErC;ACQN,ADPM,UCOF,IAAI,GAAG,MAAM,CAAC,QAAP,EAAX,CARsD,CAStD;AETA,ADIJ,AFFU,EEEV,QCJQ,IAAI,KAAK,CDIC,GAAA,KCJd,EAAwB;AACtB,AFSF,ACLF,AFFQ,UEEF,GDKG,CETC,CAAC,GAAG,ADIA,GAAG,CCJC,AFSA,CETC,EFSE,GETjB,CDIqB,CDKC,ACLA,CDKC,MAAlB,IAA4B,ECLpB,CAAuB,CDKC,KAAK,IAA5C,ACLe,CAAjB,CDKoD;AAChD,ACLJ,AFFQ,IEER,QAAQ,CAAC,CDKC,IAAI,GAAG,CCLjB,GAAqB,CDKC,CAAC,GCLG,MDKJ,CAAlB,ACLiB,CDI+B,CAEhD,ACNJ;ACJI,AFWA,ACNJ,WAAO,CCLC,CAAC,IAAI,EDKb,ECLQ,KACC,KAAK,CAAC,OAAN,CAAc,CAAd,KACA;AACA,AFSL,ACNL,AFHS,eGAQ,CAAP,EHAG,GGAU,EHAL,GAAG,CAAZ,EGAC,IAA0B,CAAS,CAAC,MAAM,CAAC,QAAR,CAHpC,CAAJ,EAG4D;AAC1D,AFSF,eETO,MAAM,CAAX,IAAgB,CAAhB,EAAwC;AACtC,AFSJ,AC5DmB,AFkDf,YGCA,IAAI,GHDC,CGCG,GHDC,CAAC,GGCK,AHDF,CGCL,AHDR,EAAgB,CAAC,EGCI,CHDD,OGCZ,GAAwB,AHDF,CGCtB,AHDuB,GGCK,GHDpC,EAAuC,CGCG,AHDF,CGCG,CAAD,AHD1C,CGCA,CHD4C;AGE7C,AFSH,ACNR,AFJc,oBAAI,UAAU,CAAC,CAAD,CAAV,CAAc,KAAd,CAAoB,OAApB,CAA4B,MAA5B,KAAuC,CAA3C,EAA8C;AGEnD,AHDO,SGNR,MAOO,GHDC,KAAK;AGEX,AFQF,ADTO,UGCL,EFQE,CAAC,CERC,IAAI,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,GFQZ,GERkB,CAAC,AFQxC,CERuC,AFQ5C,CERE,CFQ+B;AEPhC,AFQC,ADTG,eCSE,MAAL,CAAY,IAAZ,CAAiB,SAAjB;AEPH,AM/EP,IAAMI,CAAC,GAAG,SAAJA,CAAI,GAAM;ANgFX,AFOK,ADTE,AS7EV,URsFQ,SAAS,EDTA,KAAK,KAAK,CAAjB,EAAoB;ACUvB,ADTK,SCMN,MAGO,IAAI,SAAS,KAAK,IAAI,CAAC,KAAvB,EAA8B;AENzC,AFOM,ADTI,IGEV,IAAI,IAAI,EFOE,IAAI,CEPC,AFOA,CEPC,CAAD,CAAf,CFOU,KAAc,MAAlB,EAA0B;AENhC,AFOQ,ADTE,WGEH,IAAP,GFOc,IAAI,ADTF,GCSK,KAAK,KDTG,GAAG,CCSX,CAAe,IDTE,CAAC,OAAP,CAAe,OCS1B,CAAoC,CDTzB,CAAtB,CAHkB,CAIlB,CCQoD,OAAzC,CAAb;AENT,AFOS,YAAA,IAAI,CAAC,eAAL,CAAqB,IAAI,CAAC,eAA1B;ADRE,AS7EZ,MAAMC,KAAK,GAAG,QT6EI,IAAI,GAAG,sBAAsB,CAAC,IAAvB,CAA4B,aAA5B,EAA4C,CAA5C,CAAb,CALkB,CAMlB;AGEZ,AFMU,ACPN,AFAQ,AS9EVC,EN+EF,EM/EEA,EP8ES,ECCL,GAAA,CM/EI,EAAE,GRqFG,MAAL,ACPN,CDOkB,IAAZ,CAAiB,GCPU,CDO3B,aCPN,CAA+C;ACEjD,AFMO,ACPT,AFAY,AShFE,EPgFd,COhFA,KNiFM,CDDC,EDGC,CCHD,CCCI,IFMI,CENb,EAAgB;AACd,AFMM,ACPR,AFAU,AS7EZ,WN8ES,ADDA,KCCL,CFMW,EENE,ADDA,IDOP,CENN,AFMkB,CCPC,GDOb,CAAiB,GAAG,ACPb,EAAe,GDOG,KCPjC,IDO4B,CAAe,0BAAf,CAChB,IADgB,EACC,IAAI,CAAC,IADN,EACY,IAAI,CAAC,OADjB,EAC0B,KAAK,OAD/B,CAApB;AELN,AFOK,ACRR,AFAW,WGCH,OAAL,CAAa,YAAb,CAA0B,KAAK,IAA/B,EAAqC,KAAK,SAAL,EAArC;AACD;AACF,AFMO,ACPR,AFDY,EECZ,QDOQ,SAAS,CCPC,EFDA,CECA,kBFDmB,GACrB,IAAI,CAAC,WAAL,KAAqB,oBADzB;ACSL,ACPL,AFAU,SCHC,CCGL,KDOK,GCPG,GAAG,CFAD,KEAO,SFAO,GACf,IAAgB,CAAC,CEDf,EAAjB,SFCe,CAA8B,mBAA9B,CADL;AGxDiB,AFgErB,ACPN,AFCU,AS/EZ,MAAMC,IRqFE,ACPA,CO9EG,GAAG,GP8EC,EDOE,CCPC,EFCA,MEDQ,CAAC,AFCF,AS/EVA,GT+Ea,GS/Ed,CP8EZ,CO9EoBV,IAAR,EAAiB,GT+EW,CAAC,KAAf,CAAqB,WAArB,CAAhB;AEAV,AFCU,AS/EV,UP8EM,KO9ECW,KP8ES,CFCD,EEDI,GFCT,CAAW,CS/ErB,EP8E0B,CAAC,AFCjB,CAAgB,SED1B,QO7E6BX,IAD7B,EACqCU,MADrC;ARqFM,ACNN,AFA2B,AS5E5B,GAJD,CPgFE,OAAO,CAAC,EDME,IAAI,ADNa,CCMZ,GDNgB,CEA/B,CAAoB,AFAa,GCMvB,KAAkB,ECN5B,CFA0B,OCMpB,EAAkC;AAChC,ACNR,AFD8C,AS1EhD,YRiFU,MDPsC,KAApB,KCOF,ACNV,CDMY,IAA4B,CAAC,CCNvD,EAAuB,IDMC,CAAhB,KCNyB,CAAC,UAAlC;ACDE,AFQK,ACNP,AFFqD,MGA5C,KDEF,OFF8C,CGAnD,ADEF,CCFsB,EHAI;AGI5B,ADDC,AFH4D,EGI7D,WAAA,CAAY,IHJiD,IGI7D,EAAwC;AAFxC,AFOQ,ADToB,SGE5B,CFOQ,IEPR,AFOY,GEPK,AFOF,ADTH,MCSS,CAAC,EEPtB,MFOe,EAAP;AEJN,AFKK,ACnB4C,AFUtC,SGIN,OHJM,EGIX,EHJ2B,CGIV,AHJW,QGI5B,OHJW,CAAiC,mBAAjC;AGKZ,AFKI,ADTO,gBAAA,SAAS,IAAI,OAAO,CAAC,MAAR,GAAiB,CAA9B;ACUT,ADTQ,KC9BT;AEmCF,AHJS,EGIT,QAAQ,CAAC,KAAD,EAAe;AACrB,AFIA,IAAA,IEJI,KAAK,KAAK,EFIE,CAAC,QAAD,CAAhB,EEJI,KAAuB,CAAC,WAAW,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,KAAK,KAA7D,CAAJ,EAAyE;AACvE,AHLI,ASxER,MAAME,KN6EG,GM7EK,EN6EV,AHLS,CSxEI,EN6EA,CHLY,CAAC,GGK1B,CADuE,CAEvE,AM9EEA,ETwEO,KAA6B,CSxEzB,OAEfC,ETsEM,EAA8C,ASxErC,EAIZ;AN2ED,AFEF,ADRQ,ASrEL,QR6EC,AQhFaC,MTwET,ASrEL,QAHDC,GRgFF,EAAkB,GDRM,CAAC,IAAD,ASrErB,CTqEK;AGON,AFEA,ADRK,AStEJ,MR8ED,EQjFuBC,KAGtB,CR8EO,CAAC,MQjFcA,GRiFvB,CAAmB,CQ9ElB,OR8ED;AACA,ADRG,ASvEF,MR+ED,EQhFFC,GTkCI,ISjCD,ETuEQ,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AS3CX,GAlBD,CNyEE,IAAI,CAAC,OAAL,CAAa,KAAK,OAAL,GAAe,6BAA5B;AACD,AHZW,AO/Jd;AJ6KE,AHbY,AS3CZ,SAAO;AT4CK,AS3CVkB,IAAAA,MAAM,EAANA,MADK,GT4CU,KAAL,CAAW,IAAX,CAAgB;AAAC,AS1C3BK,IAAAA,KAAK,EAALA,KAFK,ET4CsB,IAAI,EAAE,MAAP;AAAe,ASzCzCK,IAAAA,MAAM,EAANA,MTyCyC,AS5CpC,KT4CyC,EAAE,CAAC;AAAvB,ASxC1BC,IAAAA,GAAG,EAAHA,GAJK,KT4CK;AACD,ASxCTC,IAAAA,QAAQ,EAARA,QALK;AT8CE,ASxCPJ,IAAAA,QAAQ,EAARA;ANuDF,AHdO,AS/CA,EN6DP,CM7DA,cN6De,CAAC,GAAD,EAAc;AAC3B,AHdG,ASxCN,CA1HD,GNgLI,GAAG,CAAC,OAAJ,CAAY,KAAK,SAAL,GAAiB,6BAA7B;AHbC,KAnHD;AGiIA,AMrDJ,IAAMU,IAAI,CNqDD,EMrDI,KNqDT,GAAe,CMrDbA,ENqDgB,CAAC,CMrDV,MNqDT,EMrDyE;ANsDzE,AHdA,ASxCyE,INsDzE,AHdA,ESxCYT,CNsDT,CAAC,EMtDqE,KNsDzE,GAAc,CMtDFA,CTwCI,CAAC,EGcE,AMtDsD,KTwCzD,CAAhB,CAzH8D,CA0H9D,CGaA;AACD,AMvD0E,MAAvD1B,EAAuD,SAAvDA,EAAuD;AAAA,AFjH7E,6BEiH0BoC,QAAmD;ANyD3E,AHfE,AS1CyE,ENyD3E,IMzDwBA,GT0CjB,CGeC,CAAC,GMzDkE,CT0C9D,CGeL,AHfN,EGeqB,EHfL,aAAhB,EAA+B,US1CE,UAAAC,QAAQ;AN0DzC,AHfE,AS3CuC,MT2CvC,CAAC,CAAC,CGeC,EM1DwCC,OT2C3C,AS3CkD,CT2CpC,AS3CqCC,GN0DrD,AM1D6C,CAAYF,EN0DpC,KAArB,AHfE,CAA0B,AS3CiB,CT2C3C,AS3CuC;AN2D1C,AHfE,AS5CwC,GAAgC;AT6C1E,AS5CD,MAAMG,MAAM,GAAGtC,CAAC,EAAhB;AN4DA,EAAA,MAAM,GAAA;AACJ,AHnJiB,ASwFnB,MAAMuC,KN2DG,CM3DG,GAAG,SAATA,MAAS,Q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","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      let node = start;\n      while (node !== end) {\n        const n = node!.nextSibling;\n        container.insertBefore(node!, before as Node);\n        node = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes =\n    (container: Node, startNode: Node|null, endNode: Node|null = null):\n        void => {\n          let node = startNode;\n          while (node !== endNode) {\n            const n = node!.nextSibling;\n            container.removeChild(node!);\n            node = n;\n          }\n        };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, cause it to actually be written to the DOM.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange: object = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  parts: TemplatePart[] = [];\n  element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n    let index = -1;\n    let partIndex = 0;\n    const nodesToRemove: Node[] = [];\n    const _prepareTemplate = (template: HTMLTemplateElement) => {\n      const content = template.content;\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          content,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      // Keeps track of the last index associated with a part. We try to delete\n      // unnecessary nodes, but we never want to associate two different parts\n      // to the same index. They must have a constant node between.\n      let lastPartIndex = 0;\n      while (walker.nextNode()) {\n        index++;\n        const node = walker.currentNode as Element | Comment | Text;\n        if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n          if ((node as Element).hasAttributes()) {\n            const attributes = (node as Element).attributes;\n            // Per\n            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n            // attributes are not guaranteed to be returned in document order.\n            // In particular, Edge/IE can return them out of order, so we cannot\n            // assume a correspondance between part index and attribute index.\n            let count = 0;\n            for (let i = 0; i < attributes.length; i++) {\n              if (attributes[i].value.indexOf(marker) >= 0) {\n                count++;\n              }\n            }\n            while (count-- > 0) {\n              // Get the template literal section leading up to the first\n              // expression in this attribute\n              const stringForPart = result.strings[partIndex];\n              // Find the attribute name\n              const name = lastAttributeNameRegex.exec(stringForPart)![2];\n              // Find the corresponding attribute\n              // All bound attributes have had a suffix added in\n              // TemplateResult#getHTML to opt out of special attribute\n              // handling. To look up the attribute value we also need to add\n              // the suffix.\n              const attributeLookupName =\n                  name.toLowerCase() + boundAttributeSuffix;\n              const attributeValue =\n                  (node as Element).getAttribute(attributeLookupName)!;\n              const strings = attributeValue.split(markerRegex);\n              this.parts.push({type: 'attribute', index, name, strings});\n              (node as Element).removeAttribute(attributeLookupName);\n              partIndex += strings.length - 1;\n            }\n          }\n          if ((node as Element).tagName === 'TEMPLATE') {\n            _prepareTemplate(node as HTMLTemplateElement);\n          }\n        } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n          const data = (node as Text).data!;\n          if (data.indexOf(marker) >= 0) {\n            const parent = node.parentNode!;\n            const strings = data.split(markerRegex);\n            const lastIndex = strings.length - 1;\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            for (let i = 0; i < lastIndex; i++) {\n              parent.insertBefore(\n                  (strings[i] === '') ? createMarker() :\n                                        document.createTextNode(strings[i]),\n                  node);\n              this.parts.push({type: 'node', index: ++index});\n            }\n            // If there's no text, we must insert a comment to mark our place.\n            // Else, we can trust it will stick around after cloning.\n            if (strings[lastIndex] === '') {\n              parent.insertBefore(createMarker(), node);\n              nodesToRemove.push(node);\n            } else {\n              (node as Text).data = strings[lastIndex];\n            }\n            // We have a part for each match found\n            partIndex += lastIndex;\n          }\n        } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n          if ((node as Comment).data === marker) {\n            const parent = node.parentNode!;\n            // Add a new marker node to be the startNode of the Part if any of\n            // the following are true:\n            //  * We don't have a previousSibling\n            //  * The previousSibling is already the start of a previous part\n            if (node.previousSibling === null || index === lastPartIndex) {\n              index++;\n              parent.insertBefore(createMarker(), node);\n            }\n            lastPartIndex = index;\n            this.parts.push({type: 'node', index});\n            // If we don't have a nextSibling, keep this node so we have an end.\n            // Else, we can remove it to save future costs.\n            if (node.nextSibling === null) {\n              (node as Comment).data = '';\n            } else {\n              nodesToRemove.push(node);\n              index--;\n            }\n            partIndex++;\n          } else {\n            let i = -1;\n            while ((i = (node as Comment).data!.indexOf(marker, i + 1)) !==\n                   -1) {\n              // Comment node has a binding marker inside, make an inactive part\n              // The binding won't work, but subsequent bindings will\n              // TODO (justinfagnani): consider whether it's even worth it to\n              // make bindings in comments work\n              this.parts.push({type: 'node', index: -1});\n            }\n          }\n        }\n      }\n    };\n    _prepareTemplate(element);\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  type: 'node',\n  index: number\n}|{type: 'attribute', index: number, name: string, strings: string[]};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  _parts: Array<Part|undefined> = [];\n  processor: TemplateProcessor;\n  options: RenderOptions;\n  template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: unknown[]) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // When using the Custom Elements polyfill, clone the node, rather than\n    // importing it, to keep the fragment in the template's document. This\n    // leaves the fragment inert so custom elements won't upgrade and\n    // potentially modify their contents by creating a polyfilled ShadowRoot\n    // while we traverse the tree.\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const parts = this.template.parts;\n    let partIndex = 0;\n    let nodeIndex = 0;\n    const _prepareInstance = (fragment: DocumentFragment) => {\n      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n      // null\n      const walker = document.createTreeWalker(\n          fragment,\n          133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n          null,\n          false);\n      let node = walker.nextNode();\n      // Loop through all the nodes and parts of a template\n      while (partIndex < parts.length && node !== null) {\n        const part = parts[partIndex];\n        // Consecutive Parts may have the same node index, in the case of\n        // multiple bound attributes on an element. So each iteration we either\n        // increment the nodeIndex, if we aren't on a node with a part, or the\n        // partIndex if we are. By not incrementing the nodeIndex when we find a\n        // part, we allow for the next part to be associated with the current\n        // node if neccessasry.\n        if (!isTemplatePartActive(part)) {\n          this._parts.push(undefined);\n          partIndex++;\n        } else if (nodeIndex === part.index) {\n          if (part.type === 'node') {\n            const part = this.processor.handleTextExpression(this.options);\n            part.insertAfterNode(node.previousSibling!);\n            this._parts.push(part);\n          } else {\n            this._parts.push(...this.processor.handleAttributeExpressions(\n                node as Element, part.name, part.strings, this.options));\n          }\n          partIndex++;\n        } else {\n          nodeIndex++;\n          if (node.nodeName === 'TEMPLATE') {\n            _prepareInstance((node as HTMLTemplateElement).content);\n          }\n          node = walker.nextNode();\n        }\n      }\n    };\n    _prepareInstance(fragment);\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  strings: TemplateStringsArray;\n  values: unknown[];\n  type: string;\n  processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const endIndex = this.strings.length - 1;\n    let html = '';\n    for (let i = 0; i < endIndex; i++) {\n      const s = this.strings[i];\n      // This exec() call does two things:\n      // 1) Appends a suffix to the bound attribute name to opt out of special\n      // attribute value parsing that IE11 and Edge do, like for style and\n      // many SVG attributes. The Template class also appends the same suffix\n      // when looking up attributes to create Parts.\n      // 2) Adds an unquoted-attribute-safe marker for the first expression in\n      // an attribute. Subsequent attribute expressions will use node markers,\n      // and this is safe since attributes with multiple expressions are\n      // guaranteed to be quoted.\n      const match = lastAttributeNameRegex.exec(s);\n      if (match) {\n        // We're starting a new bound attribute.\n        // Add the safe attribute suffix, and use unquoted-attribute-safe\n        // marker.\n        html += s.substr(0, match.index) + match[1] + match[2] +\n            boundAttributeSuffix + match[3] + marker;\n      } else {\n        // We're either in a bound node, or trailing bound attribute.\n        // Either way, nodeMarker is safe to use.\n        html += s + nodeMarker;\n      }\n    }\n    return html + this.strings[endIndex];\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\n\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n  element: Element;\n  name: string;\n  strings: string[];\n  parts: AttributePart[];\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      this.parts[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (v != null &&\n            (Array.isArray(v) ||\n             // tslint:disable-next-line:no-any\n             typeof v !== 'string' && (v as any)[Symbol.iterator])) {\n          for (const t of v as Iterable<unknown>) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        } else {\n          text += typeof v === 'string' ? v : String(v);\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\nexport class AttributePart implements Part {\n  committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(comitter: AttributeCommitter) {\n    this.committer = comitter;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\nexport class NodePart implements Part {\n  options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Inserts this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n   * its next sibling must be static, unchanging nodes such as those that appear\n   * in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part._insert(this.startNode = createMarker());\n    part._insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Appends this part after `ref`\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref._insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    const value = this._pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this._commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this._commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this._commitNode(value);\n    } else if (\n        Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        (value as any)[Symbol.iterator]) {\n      this._commitIterable(value as Iterable<unknown>);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this._insert(value);\n    this.value = value;\n  }\n\n  private _commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = value as string;\n    } else {\n      this._commitNode(document.createTextNode(\n          typeof value === 'string' ? value : String(value)));\n    }\n    this.value = value;\n  }\n\n  private _commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this._commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart!.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  element: Element;\n  name: string;\n  strings: string[];\n  value: unknown = undefined;\n  _pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n    const value = !!this._pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n    }\n    this.value = value;\n    this._pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  single: boolean;\n\n  constructor(element: Element, name: string, strings: string[]) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  element: Element;\n  eventName: string;\n  eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  _options?: AddEventListenerOptions;\n  _pendingValue: undefined|EventHandlerWithOptions = undefined;\n  _boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this._boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this._pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this._pendingValue)) {\n      const directive = this._pendingValue;\n      this._pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this._pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this._pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    if (shouldAddListener) {\n      this._options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this._boundHandleEvent, this._options);\n    }\n    this.value = newListener;\n    this._pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): Part[] {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const comitter = new PropertyCommitter(element, name.slice(1), strings);\n      return comitter.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const comitter = new AttributeCommitter(element, name, strings);\n    return comitter.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  stringsArray: WeakMap<TemplateStringsArray, Template>;\n  keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\nimport {TemplateResult} from './template-result.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: TemplateResult,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","export const MOCK = [\r\n  {\r\n    _id: \"5c9577cb15f9f37b1473124f\",\r\n    index: 4,\r\n    guid: \"a60dc650-0aa7-4321-a163-a21681514240\",\r\n    name: \"Rosalind Terry\",\r\n    tags: [\"nisi\", \"dolore\", \"enim\", \"laborum\"],\r\n    type: \"select\"\r\n  },\r\n  {\r\n    _id: \"5c9577cbc3559c59de6a9d0a\",\r\n    index: 5,\r\n    guid: \"a3539000-5f65-4e98-921e-28c7edc3093e\",\r\n    name: \"Miles Larson\",\r\n    type: \"tel\"\r\n  },\r\n  {\r\n    _id: \"5c9577cbb9619e6cdd4a1aa0\",\r\n    index: 6,\r\n    guid: \"1266a171-0f0c-4e30-a6dc-7c22203eaa92\",\r\n    name: \"Madeleine Hammond\",\r\n    type: \"input\"\r\n  },\r\n  {\r\n    _id: \"5c9577cb425998be406be747\",\r\n    index: 7,\r\n    guid: \"957904ef-5767-4809-9b88-6c7641626968\",\r\n    name: \"Chang Middleton\",\r\n    type: \"input\"\r\n  },\r\n  {\r\n    _id: \"5c9577cb2cd2bbfd664568ce\",\r\n    index: 8,\r\n    guid: \"c3fd90f1-1cfb-43db-919d-f8655c7ffa93\",\r\n    name: \"Schneider Shields\",\r\n    friends: [\r\n      {\r\n        id: 0,\r\n        name: \"Lucinda Mcpherson\"\r\n      },\r\n      {\r\n        id: 1,\r\n        name: \"Johanna Compton\"\r\n      }\r\n    ],\r\n    type: \"checkbox\"\r\n  },\r\n  {\r\n    _id: \"5c9577cbe5d7a363de4e17a2\",\r\n    index: 9,\r\n    guid: \"b92fd3d3-028d-4151-8c8d-68092848ebb6\",\r\n    name: \"Deleon Hansen\",\r\n    suffix: \"必要项\",\r\n    type: \"password\"\r\n  }\r\n];\r\n","import { html, render } from \"lit-html\";\r\nimport { MOCK } from \"./MOCK.js\";\r\n\r\nconst Z = () => {\r\n  /**\r\n   * 表单验证规则\r\n   * @readonly\r\n   * @enum {string}\r\n   */\r\n  const RULES = {\r\n    REQUIRED: \"required\"\r\n  };\r\n\r\n  /**\r\n   * 渲染 <label /> 视图\r\n   * @access private\r\n   */\r\n  const label = (label, guid) => {\r\n    return html`\r\n      <label class=\"label\" for=${guid}>${label}</label>\r\n    `;\r\n  };\r\n\r\n  /**\r\n   * 验证表单方法\r\n   * @access private\r\n   * @param {HTMLElement} target - 触发验证的表单控件\r\n   * @param {string} rule - 用于验证表单的条件；\r\n   * @param {string} [message] - 验证失败时的错误提示\r\n   */\r\n  const validate = (\r\n    { parentElement: parent, value },\r\n    rule,\r\n    message = \"靓仔，你这个不能空着啊！\"\r\n  ) => {\r\n    switch (rule) {\r\n      case RULES.REQUIRED:\r\n        parent.dataset.invalid = value.trim() ? \"\" : message;\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`尚未定义 ${rule} 类型的校验规则！`);\r\n    }\r\n  };\r\n\r\n  const select = ({ name, guid, tags }) => {\r\n    const change = ({ target }) => {\r\n      validate(target, RULES.REQUIRED, \"不中啊！怎么说也得选一个 -_-!\");\r\n    };\r\n\r\n    return html`\r\n      <div class=\"field\">\r\n        ${name && label(name, guid)}\r\n\r\n        <div class=\"control\" data-invalid>\r\n          <select @change=${change} class=\"select\" name=${guid} id=${guid}>\r\n            <option value=\"\">请选择</option>\r\n            ${tags.map(\r\n              tag =>\r\n                html`\r\n                  <option value=${tag}>${tag}</option>\r\n                `\r\n            )}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    `;\r\n  };\r\n\r\n  const input = ({ name, guid, suffix, type }) => {\r\n    const blur = ({ target }) => {\r\n      validate(target, RULES.REQUIRED);\r\n    };\r\n\r\n    return html`\r\n      <div class=\"field\">\r\n        ${name && label(name, guid)}\r\n\r\n        <div class=\"control\" data-suffix=${suffix ? suffix : \"\"} data-invalid>\r\n          <input\r\n            @blur=${blur}\r\n            class=\"input\"\r\n            id=${guid}\r\n            name=${guid}\r\n            type=${type.toLowerCase() === \"input\" ? \"text\" : type}\r\n          />\r\n        </div>\r\n      </div>\r\n    `;\r\n  };\r\n\r\n  const password = data => input(data);\r\n\r\n  const number = data => input(data);\r\n\r\n  const tel = data => input(data);\r\n\r\n  const checkbox = ({ friends }) => {\r\n    const units = ({ id, name }) => html`\r\n      <input id=${id} name=${id} type=\"checkbox\" />\r\n\r\n      ${name && label(name, id)}\r\n    `;\r\n\r\n    return html`\r\n      <div class=\"field\">\r\n        ${Array.isArray(friends)\r\n          ? friends.map(friend => {\r\n              return html`\r\n                <div class=\"col-${friends.length}\">${units(friend)}</div>\r\n              `;\r\n            })\r\n          : units(friends)}\r\n      </div>\r\n    `;\r\n  };\r\n\r\n  return {\r\n    select,\r\n    input,\r\n    number,\r\n    tel,\r\n    checkbox,\r\n    password\r\n  };\r\n};\r\n\r\nconst form = ({ data, id, onSubmit = formData => console.log(formData) }) => {\r\n  const inputs = Z();\r\n\r\n  const submit = ({ preventDefault, target }) => {\r\n    preventDefault();\r\n\r\n    const formData = new FormData(target);\r\n\r\n    onSubmit(formData);\r\n  };\r\n\r\n  return html`\r\n    <form class=\"form\" id=${id} @submit=${submit}>\r\n      ${data.map(input => inputs[input.type](input))}\r\n\r\n      <button class=\"button\" type=\"submit\">提交</button>\r\n    </form>\r\n  `;\r\n};\r\n\r\nrender(form({ data: MOCK, id: \"signup\" }), document.getElementById(\"root\"));\r\n"]}